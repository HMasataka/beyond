// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/caravan-inc/fankey-server/domain/model"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RUwW7bMAz9FYPb0bPd7ebbeihQbMCCDjsNOWg2m6qzJZWkhxmG/n2Q7DSuEwzxml0S",
	"SyDfIx/5NEBlW2cNGmEoB+DqAVsVPz9rlg3KHbKzhjFcObIOSTTGAF2HX+kdQgkspM0OvE9BtDThagmQ",
	"7mPtj0esBHwKGzuFPHXIsp5ikb9kSOH3O1E7hvI7OBTYzilXt3UW9DdGelU7c4C/kXaMtGD910EdIZzB",
	"G/K1ubcBuUauSDvR1kAJN8r8xD75uLmFA8WLy19IPMZeZUVWhEWwDo1yGkr4kBXZFaTglDzE6nOH427u",
	"UI7Z5qcIQyp839aHBeSIRqpFQQo9DKBD6lOH1EMKRrVRGEtyHc6jBwLVW8J7KCHLY3rWq7Z5kx8Mk09u",
	"yb+Oqd5vU6BJxFjy+6IIf5U1giZWr5xrdBVrzB85tDAcE54kWdopjuClGF8+xbly17aK+kmBZJJgua3O",
	"8ko9b7SpJzAaN/Ta1v3FGlyY2ccGXyWnFmz5bNq9rs/br4hUf0pnh5LQYQ5zxe9QOjKcqKZJ3CnhfQp5",
	"8FCsa/0M9l79jzOYv0AXGMJ5dCuWeibBiUdpuhr2tg6q+/T5GCP91v8JAAD//zT8/ib5BgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./param.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

