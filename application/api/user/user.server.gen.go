// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package user

import (
	"encoding/json"
	"fmt"
	"net/http"

	externalRef1 "github.com/caravan-inc/fankey-server/application/api/payload"
	"github.com/go-chi/chi/v5"
)

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody externalRef1.PostUserRequest

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// PostUser
	// (POST /users)
	PostUser(w http.ResponseWriter, r *http.Request) (interface{}, error)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler             ServerInterface
	HandlerMiddlewares  []MiddlewareFunc
	ResponseHandlerFunc func(w http.ResponseWriter, r *http.Request, res interface{}) error
	ErrorHandlerFunc    func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		res, err := siw.Handler.PostUser(w, r)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, err)
			return
		}
		err = siw.ResponseHandlerFunc(w, r, res)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, err)
			return
		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL             string
	BaseRouter          chi.Router
	Middlewares         []MiddlewareFunc
	ResponseHandlerFunc func(w http.ResponseWriter, r *http.Request, res interface{}) error
	ErrorHandlerFunc    func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	if options.ResponseHandlerFunc == nil {
		options.ResponseHandlerFunc = func(w http.ResponseWriter, r *http.Request, res interface{}) error {
			w.WriteHeader(http.StatusOK)
			if res != nil {
				w.Header().Set("Content-Type", "application/json")
				responseBytes, err := json.Marshal(res)
				if err != nil {
					return err
				}
				_, err = w.Write(responseBytes)
				return err
			}
			return nil
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:             si,
		HandlerMiddlewares:  options.Middlewares,
		ErrorHandlerFunc:    options.ErrorHandlerFunc,
		ResponseHandlerFunc: options.ResponseHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUser)
	})

	return r
}

